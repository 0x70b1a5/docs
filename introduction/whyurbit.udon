:-  :~  title/'Why Urbit Uses a Blockchain'
        sort/'5'
    ==
;>

# Why Urbit Uses a Blockchain

Urbit is a network of personal servers. These personal servers, called ships,
are stateful, deterministic virtual machines that run on Unix boxes, usually in
the cloud.

One of the core innovations of Urbit is its system of consistent and trustable
online identities. So every ship has an associated secure identity, called a
point, that it needs to connect to the network. Your point is your name, your
network address, and your cryptographic signature. Apoint can be thought of
unified digital identity that performs the functions of a Google login, an IP
address, a domain name, and a PGP keypair.

There are a limited number of possible points, and such scarcity gives points
value. This means that bad actors -- spammers, scammers, and malware-spreaders
-- can be made economically unviable. Points can assign reputation information
to other points, and can use this information to decide who to treat as a
trusted peer.

Having one identity for your digital life also means that all the services that
you trust recognize you. You no longer need to worry about managing dozens of
different logins, or about identity theft. When you’re on a ship, you’re always
verified on the Urbit network thanks to its associated identity.

But we need a way to secure these identities. To that end, we have built a
public-key infrastructure (PKI) called Azimuth on the Ethereum blockchain.
Azimuth acts as a decentralized ledger for points: it determines which Ethereum
addresses own which points. It’s separate from and parallel to the Urbit
network.

In theory, our ecosystem doesn’t need a blockchain, because Urbit identities are
more like real estate than currency: they change hands slowly. A low-friction,
zero-trust solution to the double-spend problem isn’t an economic necessity. So
we could have the Urbit network run its own key-signing system. But, since Urbit
identities are valuable, you don’t want to put them in an self-hosted PKI that
isn’t generally recognized as secure.

Moving the Urbit land registry to Ethereum is an easy and obvious solution to
this problem. We chose Ethereum over Bitcoin because the former is built for
computation and the latter is not. We need a computational blockchain to enforce
the specific rules of the Urbit identity registry.

# The Urbit HD Wallet

The Urbit HD Wallet's derivation paths also have this hierarchical structure, so that keys with different powers can be physically separated. A "master ticket" can re-derive the entire wallet in case of loss. The encryption and authentication keys that Urbit points use to sign messages within the network are also derived from the wallet.

The Urbit HD Wallet is not one key-pair, but a system of related key-pairs that each have distinct powers, from setting networking keys for communicating in the Urbit network to transferring ownership of your Azimuth address space (your point).

Urbit HD wallets are composed of the following items, which are each assigned to their own individual Ethereum key-pairs.

Master Ticket

Think of your master ticket like a very high value password. The master ticket is the secret code from which all of your other keys are derived. Technically, your master ticket is seed entropy. You should never share it with anyone, and store it very securely. This ticket can derive all of your other keys: your ownership key and all of the related proxies.

Ownership Address

An ownership address has all rights over the assets deeded to it. These rights are on-chain actions described and implemented in the Constitution, Urbit’s Ethereum smart contracts.

Proxies

Proxy addresses allow you to execute non-ownership related actions like spawning child points, voting, and setting networking keys without jeopardizing the keys you've designated with ownership rights. Setting proxy rights is optional, but it is recommended for on-chain actions you will execute more frequently.

Management Proxy

Can configure or set Urbit networking keys and conduct sponsorship related operations.

Voting Proxy

Galaxies only. Galaxies are the part of the galactic senate, and this means they can cast votes on new proposals including changes to the Constitution.

Spawn Proxy

For stars and galaxies only. Can create new child points.

Most Ethereum tokens use the ERC-20 standard for smart contracts. Azimuth points are, however, essentially different from most Ethereum tokens, due to points not being fungible. Since any two stars will handle social-networking realities in a different way, they will carry a different reputation. Points are to houses as tokens are to gold.

The ERC-721 standard, having been made specifically to provide a smart-contract interface for non-fungible assets, serves our needs well. This is the standard that we use for deeding Azimuth points.

Points, and all of their blockchain operations, are governed by the Urbit Constitution. The Constitution is an Ethereum smart-contract that governs point state and the ownership, spawn, management, and voting rights affiliated with your points.

For the technical implementation details of both the ERC-721 protocol and Urbit-specific contract details, take a look at the Constitution section of our documentation. [hyperlink]

If you don’t understand the contents of this page, that’s ok. We know that the Urbit PKI isn’t the easiest thing to understand, so we made a page. Our [get started with Azimuth] section will walk you through the entire process of assigning your points to Ethereum addresses.
