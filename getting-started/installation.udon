:-  :~  title/'Installation'
        preview/'Want to get Urbit running? Look here.'
    ==
;>

# Installation

This guide is broken into five parts:

+ [Acquiring an Urbit Identity](#acquire)
+ [Using Bridge](#bridge)
+ [Installing Arvo](#arvo)
+ [Booting Your Ship](#boot)
+ [Basic Operations](#operation)

_If you just want to install the Urbit OS, Arvo, and don't need to be on the
network, you can skip to [Installing Arvo](#arvo)._

;=
  ;h2
    ;div(id "acquire"): Acquiring an Urbit Identity
  ==
==

Urbit's identity layer, called Azimuth, is a suite of contracts on the Ethereum
blockchain. An Azimuth address, called a *point*, functions as an identity and
a network address for Arvo, the Urbit operating system. An instance of Arvo is
called a *ship*. A ship can't use the Arvo network until it's combined with a
point.

Throughout this guide, we'll refer to \"Urbit identities\" and \"points\"
interchangeably.

Points are generally not freely available, so you will need to either
purchase one or get one from a friend. This guide assumes you have found a way
to acquire a point.

To get an Urbit identity, you'll need two things: an Ethereum address and a
person willing to send you the identity.

You'll probably want to start with a planet. Those are cheap identities for
everyday use. Find someone who is willing to part with a point: a friend, or a
stranger selling a point via smart contract. Once they've sent the point, you
can access it using our Bridge software.

If you bought address space from Tlon, then you should have have received a .zip
file that contains an Ethereum address and cryptographic secrets on a PDF. Your
ownership PDF contains two secrets that must be kept safe:

- *Master Ticket*: This is a master key that allows you to manage every aspect
  of your address.

- *Ownership Seed BIP39 Mnemonic*: The master ticket encoded as a BIP39 mnemonic
  for compatibility with most Ethereum wallet software, including our own
  *Bridge* client.

Once you

;=
  ;h2
    ;div(id "bridge"): Using Bridge
  ==
==

Bridge is a client that we built for accessing and managing your Urbit
identities. Bridge comes in the form of an offline HTML application that can be
run in Firefox, Safari, or Chrome.

Importantly, Bridge also automates the process of generating the keyfile that
you will need a single time to boot your ship on the Arvo network. Once a ship
is booted, it stays booted forever.

Download bridge [here](https://github.com/urbit/bridge/releases) and follow
the instructions below.

#### Step 1: Welcome

Click `Open a Wallet`.

#### Step 2: Select a Network

On the dropdown menu, make sure that `Main Network` is selected. Then click
`Continue ->`.

#### Step 3: Open a Wallet

On this dropdown menu, choose how you'd like to access your Ethereum wallet.
If you aren't using Hardware wallets (a Ledger or a Trezor), you'll want to use
your Ethereum wallet's BIP39 Mnemonic.

If you received a point from Tlon and received paper wallets in the form of
PDFs, choose `Urbit Master Ticket`.

Select the appropriate option and click `Continue ->`.

#### Step 4: Accept Your Transfer

If you were sent a point, then you should see a graphic under
`Incoming Transfers`. Click the `Details ->` link under that graphic.

Now you'll be on the management page of your point. The transfer isn't completed
yet, so click `Accept incoming transfer`. Then check both boxes and and click
their associated `Sign Transaction` and `Send Transaction` buttons.

#### Step 5: Set Your Networking Keys

You'll be returned to your point screen. Notice that that links and buttons
are now clickable. You know own this point!

Click the link that says `Set Urbit networking keys`. Choose two different,
64-character long strings of hexademical, check the box, and, like before, check
both boxes and press both buttons.

#### Step 6: Generate Your Keyfile

Return to your point by clicking its name at the navigation bar on the top of
the page.

Click the `Generate Urbit Keyfile` button and you'll be taken to a page with a
field titled `Network key`. That field should be filled in already. Click
`Generate ->`, which will download a the keyfile onto your machine.


;=
  ;h2
    ;div(id "arvo"): Installing Arvo
  ==
==

Now you're ready to install the Arvo software. You're almost there!

Arvo can only run on a Unix-like operating system -- Ubuntu,
Fedora, macOS, and FreeBSD all work well. If you're using Windows, you'll need
to get one of the aforementioned systems. Don't worry: most of them are free.

We have different installation instructions for different platforms. To install
Arvo, run the Bash commands that are listed for your operating system.

On any platform, you can check your Arvo installation by running the `urbit`
command. Installation was successful if you get a block of output that begins
with the line below:

```
Urbit: a personal server operating function
```

#### MacOS

We recommend using the Homebrew package manager to install Arvo on MacOS.

```
#Bash

brew update
brew install autoconf automake cmake gcc git gmp libsigsegv libtool meson ninja pkg-config python2 openssl re2c
git clone https://github.com/urbit/urbit
cd urbit
./scripts/bootstrap
./scripts/build
sudo ninja -C ./build/ meson-install
urbit
```

#### Ubuntu or Debian

```
# Bash

sudo apt-get update
sudo apt-get install autoconf automake cmake exuberant-ctags g++ git libcurl4-gnutls-dev libgmp3-dev libncurses5-dev libsigsegv-dev libssl-dev libtool make openssl pkg-config python python3 python3-pip ragel re2c zlib1g-dev
sudo -H pip3 install --upgrade pip
sudo -H pip3 install meson==0.29

# we need ninja 1.5.1
# 'apt-get install ninja-build' gives us 0.1.3
# 'apt-get install ninja-build' gives us 1.3.4
#
git clone git://github.com/ninja-build/ninja.git
pushd ninja
    git checkout release
    ./configure.py --bootstrap
    sudo cp ./ninja /usr/local/bin
popd


git clone https://github.com/urbit/urbit
cd urbit
./scripts/bootstrap
./scripts/build
sudo ninja -C ./build/ install
urbit
```

#### Fedora

```
# Bash

sudo yum upgrade
sudo yum install autoconf automake cmake ctags gcc gcc-c++ git gmp-devel libcurl-devel libsigsegv-devel libtool ncurses-devel ninja-build openssl openssl-devel pkgconfig python2 python3 ragel re2c wget

# meson requires python 3.5; RHEL supplies wrong version
pushd /usr/src
    sudo wget https://www.python.org/ftp/python/3.5.5/Python-3.5.5.tgz
    sudo tar xzf Python-3.5.5.tgz
    cd Python-3.5.5
    sudo ./configure --enable--optimizations
    sudo make altinstall
    which python3.5
    cd /usr/local/bin
    sudo ln -s python3.5 python3
    hash python3
popd

curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
sudo /usr/local/bin/python3 get-pip.py
# downgrade meson to avoid dependencies that redhat can't meet
sudo -H /usr/local/bin/pip3 install meson==0.29


git clone git://github.com/ninja-build/ninja.git && cd ninja
git checkout release
./configure.py --boostrap
sudo cp ./ninja /usr/local/bin

git clone https://github.com/urbit/urbit
cd urbit
./scripts/bootstrap
./scripts/build
sudo /usr/local/bin/ninja -C ./build/ install
urbit
```

#### Arch Linux

```
# Bash

sudo pacman -Syu
sudo pacman -S autoconf automake cmake curl gcc git gmp libsigsegv libtool ncurses ninja openssl python ragel re2c
curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
sudo python3 get-pip.py
git clone https://github.com/urbit/urbit
cd urbit
./scripts/bootstrap
./scripts/build
sudo ninja -C ./build/ meson-install
urbit
```

If you just want to use a fake ship for development purposes, you can now use
the command of the scheme below to boot a fake `~zod`.

```
urbit -F zod -A /path/to/arvo -s -c zod -S
```

If you want to get on the Arvo network with your point, then continue to the
next section.


;=
  ;h2
    ;div(id "boot"): Booting Your Urbit
  ==
==


Now the rubber meets the road. You'll be booting your ship with the keyfile
that you downloaded from bridge.

#### Step 1: Find Your Point's Name

This will look something like `~lodleb-ritrul`. You can see the name of your
point(s) when you log into your wallet using the Bridge client.

;img@"http://media.urbit.org/site/bridge-0.png"(width "100%");

#### Step 2: Find the path to your keyfile

Find the absolute path to the keyfile that you downloaded from Bridge. Copy it.

#### Step 3: Run the boot command

Type `cd` in your terminal to return to your home directory. If you want to
store your ship somewhere besides your home directory, change the terminal's
working directory to the desired directory.

Run the command below, except with `~sample-planet` replaced by the name of your
Urbit identity, and `path/to/my-planet.key` replaced with the path to your
keyfile:

```
urbit -w ~sample-planet -k path/to/my-planet.key
```

This will create a directory called `sample-planet/` and begin building your
ship. It may take a few minutes.

When your ship is finished booting, you will see the `~sample-planet:dojo>`
prompt. At that point, you should permanently erase your keyfile from your
machine.

;=
  ;h2
    ;div(id "operation"): Basic Operations
  ==
==

Welcome to your urbit! There's a few things you should do to become oriented.

#### Dojo

Let's try out the Dojo, the Arvo command line and Hoon REPL:

```
~sample-planet:dojo> (add 2 2)
```

Should produce:

```
> (add 2 2)
4
```

Good.

#### Mounting

Clay, the Arvo filesystem, isn't mounted to Unix by default. Switch to the Dojo
prompt and run:

```
~sample-planet:dojo> |mount %
```

This should produce:
```
> |mount %
>=
```

which indicates that the command was processed.

`|mount %` will cause a `home/` directory to appear inside your _pier_ folder in
Unix. Changes to these files are automatically synced into your ship.


#### Talk

Use `ctrl-x` to toggle between the Dojo and the Talk prompts.

While on the Talk prompt, let's join the main Urbit chat channel, `/urbit-meta`:

```
~sample-planet:talk[] ;join /urbit-meta
```

Talk is stateful, so your ship will download a backlog. `/urbit-meta` is the
place to ask questions, get help, talk about anything Urbit-related, and meet
everyone on here.

#### Shutting Down and Restarting

You can turn your ship off with `ctrl-d` from the Talk or Dojo prompts.

To restart your ship, simply pass the name of your pier:

```
$ urbit some-planet
```

#### Landscape

Your ship is also accessible through its own web interface. Through the web
interface you'll have access to our chat and message boards, the two components
of our _Landscape_ feature. This is a user-friendly way to use Talk on the
Arvo network and access and materials you've published on your ship. If You're
running Arvo locally on your own machine, try opening `http://localhost/` in
your browser.

Or, if you're running your ship on a cloud instance with a static IP address
(which we recommend!), something like 212.131.240.20,
`http://212.131.240.20:80/~~/` would go into your browser's URL bar. This way,
if you keep your ship running securely in the cloud (usually in a screen or tmux
session), you can always access your ships's web interface in any browser on
any device.

The `/~~/` in the URL will redirect you to a login page, which was generated by
Tree, the basic Arvo web interface. The page will tell you to run the `+code`
generator (an Arvo shell-script) in your Dojo to get your password. Copy and
paste that into the password-input field and hit Enter. After loading, you'll
find yourself redirected to your home page, authenticated, where you can then
use the navigation bar at the top of the page to visit your Talk web interface
and static files.

When you use the web interface, your urbit is automatically subscribed to
`/urbit-meta` and our message-board system, Posts.
