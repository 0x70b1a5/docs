:-  :~  navhome/'/docs/'
        next/'true'
        sort/'1'
        title/'|% "barcen"'
    ==
;>

# `|% "barcen"`

Produce a core, `[battery payload]`.

## Syntax

Regular:

```
|%
++  name-1  a=hoon
++  name-2  b=hoon
       ...
++  name-n  c=hoon
--
```

Note: The `++` rune may be replaced with any other rune in the `+` family.

AST:

```
[%brcn p=(unit term) q=(map term tome)]
```

## Semantics

The product of a `|%` expression is a dry core with one or more arms in the battery.

The `|%` rune is followed by a series of arm definitions, each of which begins with a rune in the `+` family (most of `++`).  There must be at least one arm, but there may be arbitrarily many.  Each arm must include a name, which is followed by the expression (`a`, `b`, and `c` above) that defines the arm product.

The core payload is the subject of the `|%` expression.

## Discussion

A core is a cell of `[battery payload]`, where the `battery` is code and the `payload` is data.  The `battery` is one or more arms.  An arm is a computation that takes the core itself as its subject.

The `|%` rune is used to construct a core from a series of arm definitions.  Each arm definition in the expression begins with an arm rune (`++`, `+$`, or `+*`).  These arms make up the `battery`.  The subject of the `|%` expression is used to make the core's `payload`.

A core is like an "object" in a conventional language, but its
attributes (_arms_) are functions on the core, not the core and
an argument.  A "method" on a core is an arm that produces a gate.

## Examples

A trivial core:

```
~zod:dojo> =foo  =+  x=58
                 |%
                 ++  n  (add 42 x)
                 ++  g  |=  b=@
                        (add b n)
                 --
~zod:dojo> n.foo
100
~zod:dojo> (g.foo 1)
101
```
