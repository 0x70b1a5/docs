:-  :~  navhome/'/docs/'
        next/'true'
        sort/'4'
        title/'=^ "tisket"'
    ==
;>

# `=^ "tisket"`

`[%tskt p=skin q=wing r=hoon s=hoon]`: pin the head of a pair; change
a leg with the tail.

## Expands to

```
=/(p -.r =.(q +.r s))
```

## Syntax

Regular: *4-fixed*.

## Discussion

`p` is a new name (possibly with type annotation, e.g., `a=@`) of a value to be pinned to the subject.  The value of `p` is the head of the product of `r`.  `q` is given the value of the tail of `r`'s product.  Then `s` is evaluated against this new subject.

We generally use `=^` when we have a state machine with a function, `r`, that
produces a cell, whose head is a result and whose tail is a new
state.  The head value is given a new name `p`, and the
tail is stuffed back into wherever we stored the old state, `q`.

This may also remind you of Haskell's State monad.

## Examples

The `og` core is a stateful pseudo-random number generator.
We have to change the core state every time we generate a
random number, so we use `=^`:

```
~zod:dojo> =+  rng=~(. og 420)
           =^  r1  rng  (rads:rng 100)
           =^  r2  rng  (rads:rng 100)
           [r1 r2]
[99 46]
```
