:-  :~  navhome/'/docs/'
        next/'true'
        sort/'10'
        title/'|* "bartar"'
    ==
;>

# `|* "bartar"`

Produce a wet gate (one-armed core with sample).

## Syntax

Regular:

```
|*  a=spec  b=hoon
```

AST:

```
[%brtr p=spec q=hoon]
```

## Semantics

A `|*` expression produces a wet gate.  `a` defines the gate's sample, and `b` is a Hoon expression that determines the output value of the gate.

## Expands to

```
=|  a
|@
++  $
  b
--
```

## Discussion

In a normal (dry) gate, your argument is converted into the
sample type.  In a generic (wet) gate, your argument type
passes through the function, rather as if it were a macro (there
is still only one copy of the code, however).

Genericity is a powerful and dangerous tool.  Use wet gates only if
you know what you're doing.

Just as with a [gate](../tis), we can recurse back into a wet gate
with `$()`.

> `$(...)` expands to `%=($ ...)` (["centis"](../../cen/tis)).

## Examples

Wet and dry gates in a nutshell:

```
~zod:dojo> =foo |=([a=* b=*] [b a])

~zod:dojo> =bar |*([a=* b=*] [b a])

~zod:dojo> (foo %cat %dog)
[6.778.724 7.627.107]

~zod:dojo> (bar %cat %dog)
[%dog %cat]
```

The dry gate does not preserve the type of `a` and `b`; the wet
gate does.
